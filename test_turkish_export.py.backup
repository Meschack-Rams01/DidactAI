#!/usr/bin/env python
"""
Test script to verify Turkish character support and PDF export functionality
"""

import os
import sys
import django
import io

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DidactAI_project.settings')
django.setup()

from exports.services import PDFExporter, DOCXExporter

def test_turkish_characters():
    """Test Turkish character support in PDF export"""
    print("🐧ª Testing Turkish Character Support in PDF Export")
    print("=" * 60)
    
    # Sample Turkish text with all special characters
    turkish_sample_data = {
        'title': 'Türkçe Matematik Sınavı',
        'description': 'Bu sınav çeÅŸitli matematik konularını içerir: çarpım, bölüm, kŸegen hesaplamaları',
        'estimated_duration': '90 dakika',
        'total_points': 100,
        'questions': [
            {
                'question_type': 'multiple_choice',
                'question': 'Üçgenin alarının toplamı kaç derecedir?',
                'points': 10,
                'options': [
                    '90 derece',
                    '180 derece',
                    '270 derece',  
                    '360 derece'
                ],
                'correct_answer': 'B',
                'explanation': 'Üçgenin iç alarının toplamı her zaman 180 derecedir.'
            },
            {
                'question_type': 'short_answer',
                'question': 'Çemberin çevresini hesaplamak için hangi formülü kullanırız?',
                'points': 15,
                'explanation': 'Çevre = 2Ï€r formülü kullanılır.'
            },
            {
                'question_type': 'true_false',
                'question': 'Karenin kŸegen uzunluÄŸu kenar uzunluÄŸunun âˆš2 katıdır.',
                'points': 5,
                'correct_answer': 'DoÄŸru',
                'explanation': 'Bu doÄŸrudur. KŸegen = kenar Ã— âˆš2'
            }
        ]
    }
    
    # Test branding with Turkish content
    turkish_branding = {
        'university_name': 'İstanbul Teknik Üniversitesi',
        'faculty': 'Mühendislik Fakültesi',
        'department': 'Bilgisayar MühendisliÄŸi Bölümü',
        'course': 'MAT 101 - Temel Matematik',
        'instructor': 'Prof. Dr. Ahmet Öztürk',
        'academic_year': '2024-2025',
        'semester': 'Güz Dönemi',
        'exam_date': '15 Aralık 2024',
        'has_logo': True,
        'logo_filename': 'universite_logosu.png'
    }
    
    try:
        # Test PDF export
        print("ðŸ“„ Testing PDF Export...")
        pdf_exporter = PDFExporter()
        pdf_buffer = pdf_exporter.export_quiz(turkish_sample_data, turkish_branding)
        
        pdf_size = len(pdf_buffer.getvalue())
        print(f"✅ PDF generated successfully! Size: {pdf_size:,} bytes")
        
        # Save test PDF
        test_pdf_path = 'test_turkish_export.pdf'
        with open(test_pdf_path, 'wb') as f:
            f.write(pdf_buffer.getvalue())
        print(f"ðŸ“ Test PDF saved as: {test_pdf_path}")
        
        # Test DOCX export
        print("\nðŸ“ Testing DOCX Export...")
        docx_exporter = DOCXExporter()
        docx_buffer = docx_exporter.export_quiz(turkish_sample_data, turkish_branding)
        
        docx_size = len(docx_buffer.getvalue())
        print(f"✅ DOCX generated successfully! Size: {docx_size:,} bytes")
        
        # Save test DOCX
        test_docx_path = 'test_turkish_export.docx'
        with open(test_docx_path, 'wb') as f:
            f.write(docx_buffer.getvalue())
        print(f"ðŸ“ Test DOCX saved as: {test_docx_path}")
        
        print("\n🎉 All Turkish character tests passed!")
        print("\nðŸ“‹ Test Results Summary:")
        print(f"  &bull; PDF Export: ✅ Working ({pdf_size:,} bytes)")
        print(f"  &bull; DOCX Export: ✅ Working ({docx_size:,} bytes)")
        print(f"  &bull; Turkish Characters: ✅ Supported")
        print(f"  &bull; University Branding: ✅ Applied")
        print(f"  &bull; Logo Support: ✅ Implemented")
        
        return True
        
    except Exception as e:
        print(f"âŒ Export test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_font_support():
    """Test font availability and Unicode support"""
    print("\nðŸ”¤ Testing Font Support")
    print("=" * 30)
    
    try:
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        
        # Test built-in fonts
        fonts_to_test = [
            'Helvetica',
            'Helvetica-Bold', 
            'Times-Roman',
            'Times-Bold'
        ]
        
        print("Available built-in fonts:")
        for font in fonts_to_test:
            try:
                # Test if font can render Turkish characters
                from reportlab.pdfgen import canvas
                buffer = io.BytesIO()
                c = canvas.Canvas(buffer)
                c.setFont(font, 12)
                c.drawString(100, 100, "Türkçe ŸŸü ÇĞIÖŞÜ")
                c.save()
                print(f"  &bull; {font}: ✅ Available")
            except Exception as e:
                print(f"  &bull; {font}: âŒ Error - {e}")
        
        # Test system fonts
        print("\nTesting system font detection:")
        import os
        system_fonts = [
            r'C:\Windows\Fonts\arial.ttf',
            r'C:\Windows\Fonts\calibri.ttf',
            r'C:\Windows\Fonts\times.ttf'
        ]
        
        for font_path in system_fonts:
            if os.path.exists(font_path):
                print(f"  &bull; {os.path.basename(font_path)}: ✅ Found")
            else:
                print(f"  &bull; {os.path.basename(font_path)}: âŒ Not found")
        
        return True
        
    except Exception as e:
        print(f"âŒ Font test failed: {str(e)}")
        return False

def main():
    """Run all tests"""
    print("🚀 DidactAI Turkish Character & PDF Export Test Suite")
    print("=" * 65)
    print()
    
    # Test font support
    font_test = test_font_support()
    
    # Test Turkish character export
    export_test = test_turkish_characters()
    
    # Final results
    print("\n" + "=" * 65)
    print("ðŸ FINAL TEST RESULTS")
    print("=" * 65)
    
    if font_test and export_test:
        print("🎉 ALL TESTS PASSED!")
        print("✅ Turkish character support is working correctly")
        print("✅ PDF and DOCX exports are functional") 
        print("✅ University branding is applied properly")
        print("\nðŸ’¡ Your DidactAI platform is ready for Turkish content!")
        
        print("\nðŸ“ Next Steps:")
        print("1. Check the generated test files:")
        print("   &bull; test_turkish_export.pdf")
        print("   &bull; test_turkish_export.docx")
        print("2. Verify Turkish characters display correctly")
        print("3. Test in your browser with actual quiz generation")
        
    else:
        print("âŒ SOME TESTS FAILED")
        print("Please check the error messages above for details")
    
    print("=" * 65)

if __name__ == "__main__":
    main()
