# Generated by Django 4.2.24 on 2025-09-23 16:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('quiz', 'Quiz'), ('exam', 'Exam'), ('syllabus', 'Syllabus'), ('flashcards', 'Flashcards'), ('summary', 'Summary'), ('questions', 'Questions'), ('answers', 'Answers')], max_length=20, verbose_name='Content Type')),
                ('title', models.CharField(max_length=200, verbose_name='Generation Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('input_prompt', models.TextField(help_text='The prompt sent to the AI model', verbose_name='Input Prompt')),
                ('input_parameters', models.JSONField(blank=True, default=dict, help_text='Parameters used for generation (questions count, difficulty, etc.)', verbose_name='Input Parameters')),
                ('generated_content', models.JSONField(blank=True, default=dict, help_text='The AI-generated content in structured format', verbose_name='Generated Content')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('error', 'Error'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('ai_model', models.CharField(default='gemini-pro', max_length=50, verbose_name='AI Model')),
                ('tokens_used', models.PositiveIntegerField(default=0, verbose_name='Tokens Used')),
                ('processing_time_seconds', models.FloatField(blank=True, null=True, verbose_name='Processing Time (seconds)')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Error Message')),
                ('quality_score', models.FloatField(blank=True, help_text='Auto-calculated quality score (0.0-1.0)', null=True, verbose_name='Quality Score')),
                ('user_rating', models.PositiveIntegerField(blank=True, help_text='User rating (1-5 stars)', null=True, verbose_name='User Rating')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='Favorite')),
                ('tags', models.JSONField(blank=True, default=list, verbose_name='Tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_generations', to='courses.course')),
            ],
            options={
                'verbose_name': 'AI Generation',
                'verbose_name_plural': 'AI Generations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('long_answer', 'Long Answer'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('ordering', 'Ordering')], max_length=20, verbose_name='Question Type')),
                ('question_text', models.TextField(verbose_name='Question Text')),
                ('options', models.JSONField(blank=True, default=list, help_text='List of answer options for MCQ questions', verbose_name='Answer Options')),
                ('correct_answer', models.TextField(help_text='The correct answer or answer key', verbose_name='Correct Answer')),
                ('explanation', models.TextField(blank=True, null=True, verbose_name='Explanation')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10, verbose_name='Difficulty')),
                ('points', models.PositiveIntegerField(default=1, verbose_name='Points')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('tags', models.JSONField(blank=True, default=list, verbose_name='Tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='ai_generator.aigeneration')),
            ],
            options={
                'verbose_name': 'Quiz Question',
                'verbose_name_plural': 'Quiz Questions',
                'ordering': ['generation', 'order'],
            },
        ),
        migrations.CreateModel(
            name='GenerationVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_letter', models.CharField(default='A', help_text='Version identifier (A, B, C, etc.)', max_length=1, verbose_name='Version Letter')),
                ('generated_content', models.JSONField(default=dict, verbose_name='Generated Content')),
                ('variations', models.JSONField(blank=True, default=dict, help_text='Specific variations for this version (question order, values, etc.)', verbose_name='Content Variations')),
                ('answer_key', models.JSONField(blank=True, default=dict, verbose_name='Answer Key')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Version')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('original_generation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='ai_generator.aigeneration')),
            ],
            options={
                'verbose_name': 'Generation Version',
                'verbose_name_plural': 'Generation Versions',
                'ordering': ['version_letter'],
            },
        ),
        migrations.CreateModel(
            name='GenerationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Template Name')),
                ('template_type', models.CharField(choices=[('quiz', 'Quiz Template'), ('exam', 'Exam Template'), ('syllabus', 'Syllabus Template'), ('flashcards', 'Flashcards Template'), ('summary', 'Summary Template')], max_length=20, verbose_name='Template Type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('prompt_template', models.TextField(help_text='AI prompt template with placeholders like {content}, {language}, etc.', verbose_name='Prompt Template')),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Default parameters for this template', verbose_name='Template Parameters')),
                ('is_system_template', models.BooleanField(default=False, help_text='System templates are available to all users', verbose_name='System Template')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Usage Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generation_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Generation Template',
                'verbose_name_plural': 'Generation Templates',
                'ordering': ['-usage_count', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='GenerationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('rating', 'Rating'), ('correction', 'Correction'), ('suggestion', 'Suggestion'), ('complaint', 'Complaint')], max_length=20, verbose_name='Feedback Type')),
                ('rating', models.PositiveIntegerField(blank=True, help_text='Rating from 1 to 5', null=True, verbose_name='Rating')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('suggested_improvements', models.JSONField(blank=True, default=dict, verbose_name='Suggested Improvements')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public Feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_generator.aigeneration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Generation Feedback',
                'verbose_name_plural': 'Generation Feedback',
                'ordering': ['-created_at'],
            },
        ),
    ]
